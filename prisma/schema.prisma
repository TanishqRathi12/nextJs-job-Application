// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  email        String        @unique
  password     String
  role         Role          @default(User)
  created_at   DateTime      @default(now())
  applications Application[]
  updated_at   DateTime      @updatedAt
  jobs         Job[]
  Company      Company?
  Review       Review[]
}

enum Role {
  Admin
  User
  Publisher
}

model Company {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  logo        String
  description String
  user_id     String   @unique @db.Uuid
  user        User     @relation(fields: [user_id], references: [id])
  reviews     Review[]
  Jobs        Job[]    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Application {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String
  user_id   String   @db.Uuid
  user      User     @relation(fields: [user_id], references: [id])
  job_id    String   @db.Uuid
  job       Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])
  company_id String   @db.Uuid
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Job {
  id                  String        @id @default(uuid()) @db.Uuid
  job_title           String
  company             Company       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id          String        @db.Uuid
  job_logo            String
  job_publisher       String
  job_description     String
  job_employment_type String
  job_is_remote       Boolean
  job_city            String
  job_location        String
  job_salary          Int
  applications        Application[]
  users               User          @relation(fields: [user_id], references: [id])
  user_id             String        @db.Uuid
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}
